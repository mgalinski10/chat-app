// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  
  friends      Friend[]         @relation("UserFriends")
  friendOf     Friend[]         @relation("UserFriendOf")


  blockedUsers Block[]          @relation("BlockedUsers")
  blockedBy    Block[]          @relation("BlockedBy")

  status UserStatus @default(OFFLINE)

  friendRequestsSent     FriendRequest[] @relation("SentRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedRequests")

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  SentNotifications     Notification[] @relation("SentNotifications")
  ReceivedNotifications Notification[] @relation("ReceivedNotifications")

  createdAt DateTime @default(now())
}

enum UserStatus {
  ONLINE
  OFFLINE
  BUSY
}

model Friend {
  id       Int    @id @default(autoincrement())
  user     User   @relation("UserFriends", fields: [userId], references: [id])
  userId   Int
  friend   User   @relation("UserFriendOf", fields: [friendId], references: [id])
  friendId Int
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId Int
  status     RequestStatus @default(PENDING)
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Block {
  id         Int    @id @default(autoincrement())
  blocker    User   @relation("BlockedUsers", fields: [blockerId], references: [id])
  blockerId  Int
  blocked    User   @relation("BlockedBy", fields: [blockedId], references: [id])
  blockedId  Int
  createdAt  DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model Message {
  id         Int      @id @default(autoincrement())
  text       String
  senderId   Int
  receiverId Int
  createdAt  DateTime @default(now())

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  fromUser   User     @relation("SentNotifications", fields: [fromUserId], references: [id])
  fromUserId Int

  toUser     User     @relation("ReceivedNotifications", fields: [toUserId], references: [id])
  toUserId   Int

  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
}